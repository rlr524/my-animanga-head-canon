@page "/"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject ISourceData sourceData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<PageTitle>My AniManga Head Canon</PageTitle>

@code {
    private List<CategoryModel> _categories;
    private List<StatusModel> _statuses;
    private List<SuggestionModel> _suggestions;
    private List<SourceModel> _sources;

    private string _selectedCategory = "All";
    private string _selectedStatus = "All";
    private string _searchText = String.Empty;
    private bool _isSortedByNew = true;

    protected override async Task OnInitializedAsync()
    {
        _categories = await categoryData.GetAllCategories();
        _statuses = await statusData.GetAllStatuses();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(_selectedCategory));
        _selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(_selectedStatus));
        _selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(_searchText));
        _searchText = stringResults.Success ? stringResults.Value : String.Empty;

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(_isSortedByNew));
        _isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(_selectedCategory), _selectedCategory);
        await sessionStorage.SetAsync(nameof(_selectedStatus), _selectedStatus);
        await sessionStorage.SetAsync(nameof(_searchText), _searchText);
        await sessionStorage.SetAsync(nameof(_isSortedByNew), _isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestions();

        // Filer results by a selected category
        if (_selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == _selectedCategory).ToList();
        }

        // Filter results by a selected status
        if (_selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == _selectedStatus).ToList();
        }

        // Filter results by a specific search term found in the suggestion name or description
        if (string.IsNullOrWhiteSpace(_searchText) == false)
        {
            output = output.Where(
                s => s.SuggestionName.Contains(_searchText,
                    StringComparison.InvariantCultureIgnoreCase) || 
                    s.SuggestionDescription.Contains(_searchText,
                    StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        // Order by date created or by user votes then date created
        if (_isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                            .ThenByDescending(s => s.DateCreated).ToList();
        }

        _suggestions = output;

        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        _isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        _searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        _selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        _selectedStatus = status;
        await FilterSuggestions();
    }
}
