@page "/"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject ISourceData sourceData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<PageTitle>My AniManga Head Canon</PageTitle>

@code {
    private List<CategoryModel> _categories;
    private List<StatusModel> _statuses;
    private List<SuggestionModel> _suggestions;
    private List<SourceModel> _sources;

    private string _selectedCategory = "All";
    private string _selectedStatus = "All";
    private string _searchText = String.Empty;
    bool _isSortedByNew = true;

    protected override async Task OnInitializedAsync()
    {
        _categories = await categoryData.GetAllCategories();
        _statuses = await statusData.GetAllStatuses();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(_selectedCategory));
        _selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(_selectedStatus));
        _selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(_searchText));
        _searchText = stringResults.Success ? stringResults.Value : String.Empty;

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(_isSortedByNew));
        _isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestions();

        if (_selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == _selectedCategory).ToList();
        }
    }


}
